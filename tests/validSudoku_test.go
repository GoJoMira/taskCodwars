package tests

import (
	"helloapp/app/task"
	"reflect"
	"testing"
)

func TestValidSudoku_1(t *testing.T) {
	sb := task.StringSliceToByte([][]string{{"5", "3", ".", ".", "7", ".", ".", ".", "."}, {"6", ".", ".", "1", "9", "5", ".", ".", "."}, {".", "9", "8", ".", ".", ".", ".", "6", "."}, {"8", ".", ".", ".", "6", ".", ".", ".", "3"}, {"4", ".", ".", "8", ".", "3", ".", ".", "1"}, {"7", ".", ".", ".", "2", ".", ".", ".", "6"}, {".", "6", ".", ".", ".", ".", "2", "8", "."}, {".", ".", ".", "4", "1", "9", ".", ".", "5"}, {".", ".", ".", ".", "8", ".", ".", "7", "9"}})
	got := task.IsValidSudoku(sb)
	want := true

	if !reflect.DeepEqual(got, want) {
		t.Errorf("Solve([]int) = %v; want %v", got, want)
	}
}

func TestValidSudoku_2(t *testing.T) {
	sb := task.StringSliceToByte([][]string{{"1", "2", ".", ".", ".", ".", "6", ".", "7"}, {".", ".", ".", ".", ".", ".", ".", ".", "5"}, {".", ".", "9", ".", "6", ".", "4", ".", "."}, {".", "6", ".", ".", ".", ".", ".", ".", "."}, {".", ".", ".", ".", "4", ".", ".", "7", "."}, {".", ".", ".", ".", ".", ".", ".", ".", "."}, {".", ".", ".", "5", ".", ".", ".", ".", "."}, {".", ".", ".", ".", ".", ".", ".", ".", "2"}, {".", "9", ".", ".", ".", ".", ".", ".", "7"}})
	got := task.IsValidSudoku(sb)
	want := false

	if !reflect.DeepEqual(got, want) {
		t.Errorf("Solve([]int) = %v; want %v", got, want)
	}
}

func BenchmarkValidSudoku_1(b *testing.B) {
	for i := 0; i < b.N; i++ {
		sb := task.StringSliceToByte([][]string{{"5", "3", ".", ".", "7", ".", ".", ".", "."}, {"6", ".", ".", "1", "9", "5", ".", ".", "."}, {".", "9", "8", ".", ".", ".", ".", "6", "."}, {"8", ".", ".", ".", "6", ".", ".", ".", "3"}, {"4", ".", ".", "8", ".", "3", ".", ".", "1"}, {"7", ".", ".", ".", "2", ".", ".", ".", "6"}, {".", "6", ".", ".", ".", ".", "2", "8", "."}, {".", ".", ".", "4", "1", "9", ".", ".", "5"}, {".", ".", ".", ".", "8", ".", ".", "7", "9"}})
		_ = task.IsValidSudoku(sb)
	}
}
